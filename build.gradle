import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java'
    id 'idea'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '3.0.0'
}

def versions = [
        junit   : '5.10.2',
        mockito : '5.11.0',
        lombok  : '1.18.32',
        jackson : '2.17.0',
        slf4j   : '2.0.12',
        wiremock: '3.0.1'
]

group 'ploiu'
version '1.2'

repositories {
    mavenCentral()
}

configurations.all {
    exclude group: 'org.hamcrest', module: 'hamcrest-core'
}

java {
    version = JavaLanguageVersion.of(21)
    sourceCompatibility = JavaLanguageVersion.of(21)
    targetCompatibility = JavaLanguageVersion.of(21)
}

dependencies {
    implementation "org.slf4j:slf4j-api:$versions.slf4j"
    implementation "org.slf4j:slf4j-simple:$versions.slf4j"
    implementation "com.fasterxml.jackson.core:jackson-core:$versions.jackson"
    implementation "com.fasterxml.jackson.core:jackson-databind:$versions.jackson"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$versions.jackson"
    implementation 'org.jetbrains:annotations:24.0.1'
    implementation 'com.google.inject:guice:7.0.0'
    // http client
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'
    // reactive stack
    implementation "io.reactivex.rxjava3:rxjava:3.1.8"
    implementation "org.pdfsam.rxjava3:rxjavafx:3.0.3"


    compileOnly "org.projectlombok:lombok:$versions.lombok"
    annotationProcessor "org.projectlombok:lombok:$versions.lombok"

    testCompileOnly "org.projectlombok:lombok:$versions.lombok"
    testAnnotationProcessor "org.projectlombok:lombok:$versions.lombok"

    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$versions.junit"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$versions.junit"
    testImplementation "org.mockito:mockito-core:$versions.mockito"
    testImplementation "org.mockito:mockito-junit-jupiter:$versions.mockito"
    testImplementation 'org.testfx:testfx-junit5:4.0.18'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.testfx:openjfx-monocle:21.0.2'

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$versions.junit"
}

test {
    jvmArgs = [
            // exports
            '--add-exports=javafx.graphics/com.sun.javafx.application=org.testfx',
            '--add-exports=javafx.graphics/com.sun.glass.ui=org.testfx.monocle',
            '--add-exports=javafx.graphics/com.sun.javafx.util=org.testfx.monocle',
            '--add-exports=javafx.base/com.sun.javafx.logging=org.testfx.monocle',
            '--add-exports=javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED',
            // opens
            '--add-opens=javafx.graphics/com.sun.glass.ui=org.testfx',
            '--add-opens=javafx.graphics/com.sun.javafx.application=org.testfx'
    ]
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
    }
}

javafx {
    version '21.0.3'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.media']
}

mainClassName = "ploiu.Main"

jlink {
    options = ['--strip-debug', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'Ploiu File Server'
    }
    mergedModule {
        additive = true
        requires 'jdk.crypto.ec'
    }

    jpackage {
        imageName = 'ploiu-file-server'
        skipInstaller = false
        appVersion = version
        if (Os.isFamily(Os.FAMILY_UNIX)) {
            installerType = 'deb'
            imageOptions = ['--icon', 'src/main/resources/assets/img/icon.png']
        } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            installerType = 'exe'
            imageOptions = ['--icon', 'src/main/resources/assets/img/icon.ico']
        }
        installerOutputDir = file("$buildDir/file-server-installer")
    }

}

tasks.jpackageImage.doFirst {
    println 'Installing cert to custom runtime...'
    def flags = ['-importcert', '-cacerts', '-file', './file_server_cert.pem', '-noprompt', '-storepass', 'changeit']
    // TODO platform-based command
    exec {
        if (Os.isFamily(Os.FAMILY_UNIX)) {
            commandLine('./build/image/bin/keytool', *flags)
        } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine('build/image/bin/keytool.exe', *flags)
        }

    }
}
